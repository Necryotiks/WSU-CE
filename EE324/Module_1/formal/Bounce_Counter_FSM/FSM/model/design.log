
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.8+694 (git sha1 dc9c47b5, clang 6.0.0-1ubuntu2 -fPIC -Os)


-- Executing script file `../model/design.ys' --

1. Executing Verilog-2005 frontend: Bounce_Counter_FSM.v
Parsing formal Verilog input from `Bounce_Counter_FSM.v' to AST representation.
Generating RTLIL representation for module `\Bounce_Counter_FSM'.
Successfully finished Verilog frontend.

2. Executing PREP pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.1.1. Analyzing design hierarchy..
Top module:  \Bounce_Counter_FSM

2.1.2. Analyzing design hierarchy..
Top module:  \Bounce_Counter_FSM
Removed 0 unused modules.
Module Bounce_Counter_FSM directly or indirectly contains formal properties -> setting "keep" attribute.

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 3 switch rules as full_case in process $proc$Bounce_Counter_FSM.v:119$30 in module Bounce_Counter_FSM.
Marked 4 switch rules as full_case in process $proc$Bounce_Counter_FSM.v:91$24 in module Bounce_Counter_FSM.
Marked 1 switch rules as full_case in process $proc$Bounce_Counter_FSM.v:82$22 in module Bounce_Counter_FSM.
Marked 3 switch rules as full_case in process $proc$Bounce_Counter_FSM.v:51$19 in module Bounce_Counter_FSM.
Removed a total of 0 dead cases.

2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 3 redundant assignments.
Promoted 25 assignments to connections.

2.2.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:139$117'.
  Set init value: $formal$Bounce_Counter_FSM.v:139$18_EN = 1'0
Found init rule in `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:138$115'.
  Set init value: $formal$Bounce_Counter_FSM.v:138$17_EN = 1'0
Found init rule in `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:137$113'.
  Set init value: $formal$Bounce_Counter_FSM.v:137$16_EN = 1'0
Found init rule in `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:132$111'.
  Set init value: $formal$Bounce_Counter_FSM.v:132$15_EN = 1'0
Found init rule in `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:131$109'.
  Set init value: $formal$Bounce_Counter_FSM.v:131$14_EN = 1'0
Found init rule in `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:128$107'.
  Set init value: $formal$Bounce_Counter_FSM.v:128$13_EN = 1'0
Found init rule in `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:127$105'.
  Set init value: $formal$Bounce_Counter_FSM.v:127$12_EN = 1'0
Found init rule in `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:124$103'.
  Set init value: $formal$Bounce_Counter_FSM.v:124$11_EN = 1'0
Found init rule in `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:123$101'.
  Set init value: $formal$Bounce_Counter_FSM.v:123$10_EN = 1'0
Found init rule in `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:118$100'.
  Set init value: \r_valid = 1'0
Found init rule in `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:43$99'.
  Set init value: \r_COUNTER = 14'00000000000000
Found init rule in `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:42$98'.
  Set init value: \r_CURRENT_STATE = 2'00
Found init rule in `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:41$97'.
  Set init value: \r_NEXT_STATE = 2'00
Found init rule in `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:40$96'.
  Set init value: \r_CEN = 1'0

2.2.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \w_RST in `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:91$24'.
Found async reset \w_RST in `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:82$22'.

2.2.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:139$117'.
Creating decoders for process `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:138$115'.
Creating decoders for process `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:137$113'.
Creating decoders for process `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:132$111'.
Creating decoders for process `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:131$109'.
Creating decoders for process `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:128$107'.
Creating decoders for process `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:127$105'.
Creating decoders for process `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:124$103'.
Creating decoders for process `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:123$101'.
Creating decoders for process `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:118$100'.
Creating decoders for process `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:43$99'.
Creating decoders for process `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:42$98'.
Creating decoders for process `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:41$97'.
Creating decoders for process `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:40$96'.
Creating decoders for process `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:119$30'.
     1/18: $0$formal$Bounce_Counter_FSM.v:123$10_EN[0:0]$41
     2/18: $0$formal$Bounce_Counter_FSM.v:123$10_CHECK[0:0]$40
     3/18: $0$formal$Bounce_Counter_FSM.v:124$11_EN[0:0]$43
     4/18: $0$formal$Bounce_Counter_FSM.v:124$11_CHECK[0:0]$42
     5/18: $0$formal$Bounce_Counter_FSM.v:127$12_EN[0:0]$45
     6/18: $0$formal$Bounce_Counter_FSM.v:127$12_CHECK[0:0]$44
     7/18: $0$formal$Bounce_Counter_FSM.v:128$13_EN[0:0]$47
     8/18: $0$formal$Bounce_Counter_FSM.v:128$13_CHECK[0:0]$46
     9/18: $0$formal$Bounce_Counter_FSM.v:131$14_EN[0:0]$49
    10/18: $0$formal$Bounce_Counter_FSM.v:131$14_CHECK[0:0]$48
    11/18: $0$formal$Bounce_Counter_FSM.v:132$15_EN[0:0]$51
    12/18: $0$formal$Bounce_Counter_FSM.v:132$15_CHECK[0:0]$50
    13/18: $0$formal$Bounce_Counter_FSM.v:137$16_EN[0:0]$53
    14/18: $0$formal$Bounce_Counter_FSM.v:137$16_CHECK[0:0]$52
    15/18: $0$formal$Bounce_Counter_FSM.v:138$17_EN[0:0]$55
    16/18: $0$formal$Bounce_Counter_FSM.v:138$17_CHECK[0:0]$54
    17/18: $0$formal$Bounce_Counter_FSM.v:139$18_EN[0:0]$57
    18/18: $0$formal$Bounce_Counter_FSM.v:139$18_CHECK[0:0]$56
Creating decoders for process `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:91$24'.
     1/2: $0\r_CEN[0:0]
     2/2: $0\r_COUNTER[13:0]
Creating decoders for process `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:82$22'.
     1/1: $0\r_CURRENT_STATE[1:0]
Creating decoders for process `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:51$19'.
     1/3: $3\r_NEXT_STATE[1:0]
     2/3: $2\r_NEXT_STATE[1:0]
     3/3: $1\r_NEXT_STATE[1:0]

2.2.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\Bounce_Counter_FSM.\r_NEXT_STATE' from process `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:51$19'.

2.2.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\Bounce_Counter_FSM.\r_valid' using process `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:119$30'.
  created $ff cell `$procdff$289' with global clock.
Creating register for signal `\Bounce_Counter_FSM.$past$Bounce_Counter_FSM.v:121$1$0' using process `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:119$30'.
  created $ff cell `$procdff$290' with global clock.
Creating register for signal `\Bounce_Counter_FSM.$past$Bounce_Counter_FSM.v:122$2$0' using process `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:119$30'.
  created $ff cell `$procdff$291' with global clock.
Creating register for signal `\Bounce_Counter_FSM.$past$Bounce_Counter_FSM.v:126$3$0' using process `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:119$30'.
  created $ff cell `$procdff$292' with global clock.
Creating register for signal `\Bounce_Counter_FSM.$past$Bounce_Counter_FSM.v:127$4$0' using process `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:119$30'.
  created $ff cell `$procdff$293' with global clock.
Creating register for signal `\Bounce_Counter_FSM.$past$Bounce_Counter_FSM.v:130$5$0' using process `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:119$30'.
  created $ff cell `$procdff$294' with global clock.
Creating register for signal `\Bounce_Counter_FSM.$past$Bounce_Counter_FSM.v:131$6$0' using process `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:119$30'.
  created $ff cell `$procdff$295' with global clock.
Creating register for signal `\Bounce_Counter_FSM.$past$Bounce_Counter_FSM.v:137$7$0' using process `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:119$30'.
  created $ff cell `$procdff$296' with global clock.
Creating register for signal `\Bounce_Counter_FSM.$past$Bounce_Counter_FSM.v:138$8$0' using process `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:119$30'.
  created $ff cell `$procdff$297' with global clock.
Creating register for signal `\Bounce_Counter_FSM.$past$Bounce_Counter_FSM.v:139$9$0' using process `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:119$30'.
  created $ff cell `$procdff$298' with global clock.
Creating register for signal `\Bounce_Counter_FSM.$formal$Bounce_Counter_FSM.v:123$10_CHECK' using process `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:119$30'.
  created $ff cell `$procdff$299' with global clock.
Creating register for signal `\Bounce_Counter_FSM.$formal$Bounce_Counter_FSM.v:123$10_EN' using process `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:119$30'.
  created $ff cell `$procdff$300' with global clock.
Creating register for signal `\Bounce_Counter_FSM.$formal$Bounce_Counter_FSM.v:124$11_CHECK' using process `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:119$30'.
  created $ff cell `$procdff$301' with global clock.
Creating register for signal `\Bounce_Counter_FSM.$formal$Bounce_Counter_FSM.v:124$11_EN' using process `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:119$30'.
  created $ff cell `$procdff$302' with global clock.
Creating register for signal `\Bounce_Counter_FSM.$formal$Bounce_Counter_FSM.v:127$12_CHECK' using process `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:119$30'.
  created $ff cell `$procdff$303' with global clock.
Creating register for signal `\Bounce_Counter_FSM.$formal$Bounce_Counter_FSM.v:127$12_EN' using process `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:119$30'.
  created $ff cell `$procdff$304' with global clock.
Creating register for signal `\Bounce_Counter_FSM.$formal$Bounce_Counter_FSM.v:128$13_CHECK' using process `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:119$30'.
  created $ff cell `$procdff$305' with global clock.
Creating register for signal `\Bounce_Counter_FSM.$formal$Bounce_Counter_FSM.v:128$13_EN' using process `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:119$30'.
  created $ff cell `$procdff$306' with global clock.
Creating register for signal `\Bounce_Counter_FSM.$formal$Bounce_Counter_FSM.v:131$14_CHECK' using process `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:119$30'.
  created $ff cell `$procdff$307' with global clock.
Creating register for signal `\Bounce_Counter_FSM.$formal$Bounce_Counter_FSM.v:131$14_EN' using process `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:119$30'.
  created $ff cell `$procdff$308' with global clock.
Creating register for signal `\Bounce_Counter_FSM.$formal$Bounce_Counter_FSM.v:132$15_CHECK' using process `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:119$30'.
  created $ff cell `$procdff$309' with global clock.
Creating register for signal `\Bounce_Counter_FSM.$formal$Bounce_Counter_FSM.v:132$15_EN' using process `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:119$30'.
  created $ff cell `$procdff$310' with global clock.
Creating register for signal `\Bounce_Counter_FSM.$formal$Bounce_Counter_FSM.v:137$16_CHECK' using process `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:119$30'.
  created $ff cell `$procdff$311' with global clock.
Creating register for signal `\Bounce_Counter_FSM.$formal$Bounce_Counter_FSM.v:137$16_EN' using process `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:119$30'.
  created $ff cell `$procdff$312' with global clock.
Creating register for signal `\Bounce_Counter_FSM.$formal$Bounce_Counter_FSM.v:138$17_CHECK' using process `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:119$30'.
  created $ff cell `$procdff$313' with global clock.
Creating register for signal `\Bounce_Counter_FSM.$formal$Bounce_Counter_FSM.v:138$17_EN' using process `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:119$30'.
  created $ff cell `$procdff$314' with global clock.
Creating register for signal `\Bounce_Counter_FSM.$formal$Bounce_Counter_FSM.v:139$18_CHECK' using process `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:119$30'.
  created $ff cell `$procdff$315' with global clock.
Creating register for signal `\Bounce_Counter_FSM.$formal$Bounce_Counter_FSM.v:139$18_EN' using process `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:119$30'.
  created $ff cell `$procdff$316' with global clock.
Creating register for signal `\Bounce_Counter_FSM.\r_CEN' using process `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:91$24'.
  created $adff cell `$procdff$317' with positive edge clock and positive level reset.
Creating register for signal `\Bounce_Counter_FSM.\r_COUNTER' using process `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:91$24'.
  created $adff cell `$procdff$318' with positive edge clock and positive level reset.
Creating register for signal `\Bounce_Counter_FSM.\r_CURRENT_STATE' using process `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:82$22'.
  created $adff cell `$procdff$319' with positive edge clock and positive level reset.

2.2.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:139$117'.
Removing empty process `Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:138$115'.
Removing empty process `Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:137$113'.
Removing empty process `Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:132$111'.
Removing empty process `Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:131$109'.
Removing empty process `Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:128$107'.
Removing empty process `Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:127$105'.
Removing empty process `Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:124$103'.
Removing empty process `Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:123$101'.
Removing empty process `Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:118$100'.
Removing empty process `Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:43$99'.
Removing empty process `Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:42$98'.
Removing empty process `Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:41$97'.
Removing empty process `Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:40$96'.
Found and cleaned up 5 empty switches in `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:119$30'.
Removing empty process `Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:119$30'.
Found and cleaned up 3 empty switches in `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:91$24'.
Removing empty process `Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:91$24'.
Removing empty process `Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:82$22'.
Found and cleaned up 3 empty switches in `\Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:51$19'.
Removing empty process `Bounce_Counter_FSM.$proc$Bounce_Counter_FSM.v:51$19'.
Cleaned up 11 empty switches.

2.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module Bounce_Counter_FSM.
<suppressed ~15 debug messages>

2.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Bounce_Counter_FSM..
Removed 2 unused cells and 112 unused wires.
<suppressed ~3 debug messages>

2.5. Executing CHECK pass (checking for obvious problems).
checking module Bounce_Counter_FSM..
found and reported 0 problems.

2.6. Executing OPT pass (performing simple optimizations).

2.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Bounce_Counter_FSM.

2.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Bounce_Counter_FSM'.
<suppressed ~51 debug messages>
Removed a total of 17 cells.

2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Bounce_Counter_FSM..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$274.
    dead port 2/2 on $mux $procmux$282.
Removed 2 multiplexer ports.
<suppressed ~21 debug messages>

2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Bounce_Counter_FSM.
Performed a total of 0 changes.

2.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Bounce_Counter_FSM'.
<suppressed ~54 debug messages>
Removed a total of 18 cells.

2.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Bounce_Counter_FSM..
Removed 0 unused cells and 37 unused wires.
<suppressed ~7 debug messages>

2.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module Bounce_Counter_FSM.

2.6.9. Rerunning OPT passes. (Maybe there is more to do..)

2.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Bounce_Counter_FSM..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~16 debug messages>

2.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Bounce_Counter_FSM.
Performed a total of 0 changes.

2.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Bounce_Counter_FSM'.
Removed a total of 0 cells.

2.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Bounce_Counter_FSM..

2.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module Bounce_Counter_FSM.

2.6.16. Finished OPT passes. (There is nothing left to do.)

2.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 2) from port B of cell Bounce_Counter_FSM.$eq$Bounce_Counter_FSM.v:102$27 ($eq).
Removed top 31 bits (of 32) from port B of cell Bounce_Counter_FSM.$and$Bounce_Counter_FSM.v:121$58 ($and).
Removed top 31 bits (of 32) from port Y of cell Bounce_Counter_FSM.$and$Bounce_Counter_FSM.v:121$58 ($and).
Removed top 31 bits (of 32) from port B of cell Bounce_Counter_FSM.$and$Bounce_Counter_FSM.v:121$60 ($and).
Removed top 31 bits (of 32) from port Y of cell Bounce_Counter_FSM.$and$Bounce_Counter_FSM.v:121$60 ($and).
Removed top 1 bits (of 2) from port B of cell Bounce_Counter_FSM.$eq$Bounce_Counter_FSM.v:122$66 ($eq).
Removed top 31 bits (of 32) from port B of cell Bounce_Counter_FSM.$add$Bounce_Counter_FSM.v:127$74 ($add).
Removed top 17 bits (of 32) from port Y of cell Bounce_Counter_FSM.$add$Bounce_Counter_FSM.v:127$74 ($add).
Removed top 17 bits (of 32) from port B of cell Bounce_Counter_FSM.$eq$Bounce_Counter_FSM.v:127$75 ($eq).
Removed top 1 bits (of 2) from mux cell Bounce_Counter_FSM.$procmux$280 ($mux).
Removed top 1 bits (of 2) from wire Bounce_Counter_FSM.$2\r_NEXT_STATE[1:0].
Removed top 17 bits (of 32) from wire Bounce_Counter_FSM.$add$Bounce_Counter_FSM.v:127$74_Y.
Removed top 31 bits (of 32) from wire Bounce_Counter_FSM.$and$Bounce_Counter_FSM.v:121$58_Y.

2.8. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

2.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Bounce_Counter_FSM..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

2.10. Executing MEMORY_COLLECT pass (generating $mem cells).

2.11. Executing OPT pass (performing simple optimizations).

2.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Bounce_Counter_FSM.
<suppressed ~2 debug messages>

2.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Bounce_Counter_FSM'.
Removed a total of 0 cells.

2.11.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Bounce_Counter_FSM..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

2.11.5. Finished fast OPT passes.

2.12. Printing statistics.

=== Bounce_Counter_FSM ===

   Number of wires:                 91
   Number of wire bits:            188
   Number of public wires:          13
   Number of public wire bits:      41
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 92
     $add                            2
     $adff                           3
     $assert                         6
     $assume                         3
     $eq                             9
     $ff                            18
     $logic_and                      5
     $logic_not                      3
     $mux                           41
     $not                            1
     $pmux                           1

2.13. Executing CHECK pass (checking for obvious problems).
checking module Bounce_Counter_FSM..
found and reported 0 problems.

3. Executing MEMORY_NORDFF pass (extracting $dff cells from $mem).

4. Executing ASYNC2SYNC pass.
Replacing Bounce_Counter_FSM.$procdff$317 ($adff): ARST=\i_RST, D=$0\r_CEN[0:0], Q=\r_CEN
Replacing Bounce_Counter_FSM.$procdff$318 ($adff): ARST=\i_RST, D=$0\r_COUNTER[13:0], Q=\r_COUNTER
Replacing Bounce_Counter_FSM.$procdff$319 ($adff): ARST=\i_RST, D=\r_NEXT_STATE, Q=\r_CURRENT_STATE

5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Bounce_Counter_FSM..
Removed 4 unused cells and 3 unused wires.
<suppressed ~5 debug messages>

6. Executing SETUNDEF pass (replace undef values with defined constants).

7. Executing OPT pass (performing simple optimizations).

7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Bounce_Counter_FSM.

7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Bounce_Counter_FSM'.
Removed a total of 0 cells.

7.3. Executing OPT_RMDFF pass (remove dff with constant values).
Promoting init spec $formal$Bounce_Counter_FSM.v:137$16_EN = 1'0 to constant driver in module Bounce_Counter_FSM.
Promoted 1 init specs to constant drivers.

7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Bounce_Counter_FSM..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

7.5. Rerunning OPT passes. (Removed registers in this run.)

7.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module Bounce_Counter_FSM.

7.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Bounce_Counter_FSM'.
Removed a total of 0 cells.

7.8. Executing OPT_RMDFF pass (remove dff with constant values).

7.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Bounce_Counter_FSM..

7.10. Finished fast OPT passes.

8. Executing CHECK pass (checking for obvious problems).
checking module Bounce_Counter_FSM..
found and reported 0 problems.

9. Executing HIERARCHY pass (managing design hierarchy).

9.1. Analyzing design hierarchy..
Top module:  \Bounce_Counter_FSM

9.2. Analyzing design hierarchy..
Top module:  \Bounce_Counter_FSM
Removed 0 unused modules.
Module Bounce_Counter_FSM directly or indirectly contains formal properties -> setting "keep" attribute.

10. Executing ILANG backend.
Output filename: ../model/design.il

End of script. Logfile hash: db7146997a
CPU: user 0.08s system 0.00s, MEM: 44.36 MB total, 10.15 MB resident
Yosys 0.8+694 (git sha1 dc9c47b5, clang 6.0.0-1ubuntu2 -fPIC -Os)
Time spent: 28% 8x opt_clean (0 sec), 19% 7x opt_expr (0 sec), ...
