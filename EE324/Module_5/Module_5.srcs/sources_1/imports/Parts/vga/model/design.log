
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+932 (git sha1 65f197e2, clang 6.0.0-1ubuntu2 -fPIC -Os)


-- Executing script file `../model/design.ys' --

1. Executing Verilog-2005 frontend: VGA_controller.v
Parsing formal Verilog input from `VGA_controller.v' to AST representation.
Generating RTLIL representation for module `\VGA_controller'.
Successfully finished Verilog frontend.

2. Executing PREP pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.1.1. Analyzing design hierarchy..
Top module:  \VGA_controller

2.1.2. Analyzing design hierarchy..
Top module:  \VGA_controller
Removed 0 unused modules.
Module VGA_controller directly or indirectly contains formal properties -> setting "keep" attribute.

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `VGA_controller.$proc$VGA_controller.v:146$142'.
Cleaned up 0 empty switches.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$VGA_controller.v:137$54 in module VGA_controller.
Marked 1 switch rules as full_case in process $proc$VGA_controller.v:129$45 in module VGA_controller.
Marked 1 switch rules as full_case in process $proc$VGA_controller.v:121$36 in module VGA_controller.
Marked 2 switch rules as full_case in process $proc$VGA_controller.v:106$28 in module VGA_controller.
Marked 1 switch rules as full_case in process $proc$VGA_controller.v:95$22 in module VGA_controller.
Marked 1 switch rules as full_case in process $proc$VGA_controller.v:87$19 in module VGA_controller.
Marked 1 switch rules as full_case in process $proc$VGA_controller.v:77$17 in module VGA_controller.
Removed a total of 0 dead cases.

2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 7 redundant assignments.
Promoted 47 assignments to connections.

2.2.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\VGA_controller.$proc$VGA_controller.v:168$167'.
  Set init value: $formal$VGA_controller.v:168$15_EN = 1'0
Found init rule in `\VGA_controller.$proc$VGA_controller.v:166$165'.
  Set init value: $formal$VGA_controller.v:166$14_EN = 1'0
Found init rule in `\VGA_controller.$proc$VGA_controller.v:164$163'.
  Set init value: $formal$VGA_controller.v:164$13_EN = 1'0
Found init rule in `\VGA_controller.$proc$VGA_controller.v:159$161'.
  Set init value: $formal$VGA_controller.v:159$12_EN = 1'0
Found init rule in `\VGA_controller.$proc$VGA_controller.v:158$159'.
  Set init value: $formal$VGA_controller.v:158$11_EN = 1'0
Found init rule in `\VGA_controller.$proc$VGA_controller.v:157$157'.
  Set init value: $formal$VGA_controller.v:157$10_EN = 1'0
Found init rule in `\VGA_controller.$proc$VGA_controller.v:156$155'.
  Set init value: $formal$VGA_controller.v:156$9_EN = 1'0
Found init rule in `\VGA_controller.$proc$VGA_controller.v:155$153'.
  Set init value: $formal$VGA_controller.v:155$8_EN = 1'0
Found init rule in `\VGA_controller.$proc$VGA_controller.v:154$151'.
  Set init value: $formal$VGA_controller.v:154$7_EN = 1'0
Found init rule in `\VGA_controller.$proc$VGA_controller.v:153$149'.
  Set init value: $formal$VGA_controller.v:153$6_EN = 1'0
Found init rule in `\VGA_controller.$proc$VGA_controller.v:152$147'.
  Set init value: $formal$VGA_controller.v:152$5_EN = 1'0
Found init rule in `\VGA_controller.$proc$VGA_controller.v:151$145'.
  Set init value: $formal$VGA_controller.v:151$4_EN = 1'0
Found init rule in `\VGA_controller.$proc$VGA_controller.v:150$143'.
  Set init value: $formal$VGA_controller.v:150$3_EN = 1'0
Found init rule in `\VGA_controller.$proc$VGA_controller.v:173$169'.
  Set init value: $formal$VGA_controller.v:173$16_EN = 1'0
Found init rule in `\VGA_controller.$proc$VGA_controller.v:145$141'.
  Set init value: \r_past_valid = 1'0
Found init rule in `\VGA_controller.$proc$VGA_controller.v:63$140'.
  Set init value: \r_VDE = 1'0
Found init rule in `\VGA_controller.$proc$VGA_controller.v:62$139'.
  Set init value: \r_Y_COORD = 16'0000000000000000
Found init rule in `\VGA_controller.$proc$VGA_controller.v:61$138'.
  Set init value: \r_X_COORD = 16'0000000000000000
Found init rule in `\VGA_controller.$proc$VGA_controller.v:60$137'.
  Set init value: \r_VCNT = 16'0000000000000000
Found init rule in `\VGA_controller.$proc$VGA_controller.v:59$136'.
  Set init value: \r_HCNT = 16'0000000000000000
Found init rule in `\VGA_controller.$proc$VGA_controller.v:58$135'.
  Set init value: \r_VSYNC = 1'0
Found init rule in `\VGA_controller.$proc$VGA_controller.v:57$134'.
  Set init value: \r_HSYNC = 1'0

2.2.5. Executing PROC_ARST pass (detect async resets in processes).

2.2.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\VGA_controller.$proc$VGA_controller.v:168$167'.
Creating decoders for process `\VGA_controller.$proc$VGA_controller.v:166$165'.
Creating decoders for process `\VGA_controller.$proc$VGA_controller.v:164$163'.
Creating decoders for process `\VGA_controller.$proc$VGA_controller.v:159$161'.
Creating decoders for process `\VGA_controller.$proc$VGA_controller.v:158$159'.
Creating decoders for process `\VGA_controller.$proc$VGA_controller.v:157$157'.
Creating decoders for process `\VGA_controller.$proc$VGA_controller.v:156$155'.
Creating decoders for process `\VGA_controller.$proc$VGA_controller.v:155$153'.
Creating decoders for process `\VGA_controller.$proc$VGA_controller.v:154$151'.
Creating decoders for process `\VGA_controller.$proc$VGA_controller.v:153$149'.
Creating decoders for process `\VGA_controller.$proc$VGA_controller.v:152$147'.
Creating decoders for process `\VGA_controller.$proc$VGA_controller.v:151$145'.
Creating decoders for process `\VGA_controller.$proc$VGA_controller.v:150$143'.
Creating decoders for process `\VGA_controller.$proc$VGA_controller.v:173$169'.
Creating decoders for process `\VGA_controller.$proc$VGA_controller.v:145$141'.
Creating decoders for process `\VGA_controller.$proc$VGA_controller.v:63$140'.
Creating decoders for process `\VGA_controller.$proc$VGA_controller.v:62$139'.
Creating decoders for process `\VGA_controller.$proc$VGA_controller.v:61$138'.
Creating decoders for process `\VGA_controller.$proc$VGA_controller.v:60$137'.
Creating decoders for process `\VGA_controller.$proc$VGA_controller.v:59$136'.
Creating decoders for process `\VGA_controller.$proc$VGA_controller.v:58$135'.
Creating decoders for process `\VGA_controller.$proc$VGA_controller.v:57$134'.
Creating decoders for process `\VGA_controller.$proc$VGA_controller.v:148$58'.
     1/6: $0$formal$VGA_controller.v:164$13_EN[0:0]$82
     2/6: $0$formal$VGA_controller.v:164$13_CHECK[0:0]$81
     3/6: $0$formal$VGA_controller.v:166$14_EN[0:0]$84
     4/6: $0$formal$VGA_controller.v:166$14_CHECK[0:0]$83
     5/6: $0$formal$VGA_controller.v:168$15_EN[0:0]$86
     6/6: $0$formal$VGA_controller.v:168$15_CHECK[0:0]$85
Creating decoders for process `\VGA_controller.$proc$VGA_controller.v:137$54'.
     1/1: $0\r_VDE[0:0]
Creating decoders for process `\VGA_controller.$proc$VGA_controller.v:129$45'.
     1/1: $0\r_VSYNC[0:0]
Creating decoders for process `\VGA_controller.$proc$VGA_controller.v:121$36'.
     1/1: $0\r_HSYNC[0:0]
Creating decoders for process `\VGA_controller.$proc$VGA_controller.v:106$28'.
     1/1: $0\r_VCNT[15:0]
Creating decoders for process `\VGA_controller.$proc$VGA_controller.v:95$22'.
     1/1: $0\r_HCNT[15:0]
Creating decoders for process `\VGA_controller.$proc$VGA_controller.v:87$19'.
     1/1: $0\r_Y_COORD[15:0]
Creating decoders for process `\VGA_controller.$proc$VGA_controller.v:77$17'.
     1/1: $0\r_X_COORD[15:0]

2.2.7. Executing PROC_DLATCH pass (convert process syncs to latches).

2.2.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\VGA_controller.\r_past_valid' using process `\VGA_controller.$proc$VGA_controller.v:148$58'.
  created $dff cell `$procdff$219' with positive edge clock.
Creating register for signal `\VGA_controller.$past$VGA_controller.v:151$1$0' using process `\VGA_controller.$proc$VGA_controller.v:148$58'.
  created $dff cell `$procdff$220' with positive edge clock.
Creating register for signal `\VGA_controller.$past$VGA_controller.v:161$2$0' using process `\VGA_controller.$proc$VGA_controller.v:148$58'.
  created $dff cell `$procdff$221' with positive edge clock.
Creating register for signal `\VGA_controller.$formal$VGA_controller.v:150$3_CHECK' using process `\VGA_controller.$proc$VGA_controller.v:148$58'.
  created $dff cell `$procdff$222' with positive edge clock.
Creating register for signal `\VGA_controller.$formal$VGA_controller.v:150$3_EN' using process `\VGA_controller.$proc$VGA_controller.v:148$58'.
  created $dff cell `$procdff$223' with positive edge clock.
Creating register for signal `\VGA_controller.$formal$VGA_controller.v:151$4_CHECK' using process `\VGA_controller.$proc$VGA_controller.v:148$58'.
  created $dff cell `$procdff$224' with positive edge clock.
Creating register for signal `\VGA_controller.$formal$VGA_controller.v:151$4_EN' using process `\VGA_controller.$proc$VGA_controller.v:148$58'.
  created $dff cell `$procdff$225' with positive edge clock.
Creating register for signal `\VGA_controller.$formal$VGA_controller.v:152$5_CHECK' using process `\VGA_controller.$proc$VGA_controller.v:148$58'.
  created $dff cell `$procdff$226' with positive edge clock.
Creating register for signal `\VGA_controller.$formal$VGA_controller.v:152$5_EN' using process `\VGA_controller.$proc$VGA_controller.v:148$58'.
  created $dff cell `$procdff$227' with positive edge clock.
Creating register for signal `\VGA_controller.$formal$VGA_controller.v:153$6_CHECK' using process `\VGA_controller.$proc$VGA_controller.v:148$58'.
  created $dff cell `$procdff$228' with positive edge clock.
Creating register for signal `\VGA_controller.$formal$VGA_controller.v:153$6_EN' using process `\VGA_controller.$proc$VGA_controller.v:148$58'.
  created $dff cell `$procdff$229' with positive edge clock.
Creating register for signal `\VGA_controller.$formal$VGA_controller.v:154$7_CHECK' using process `\VGA_controller.$proc$VGA_controller.v:148$58'.
  created $dff cell `$procdff$230' with positive edge clock.
Creating register for signal `\VGA_controller.$formal$VGA_controller.v:154$7_EN' using process `\VGA_controller.$proc$VGA_controller.v:148$58'.
  created $dff cell `$procdff$231' with positive edge clock.
Creating register for signal `\VGA_controller.$formal$VGA_controller.v:155$8_CHECK' using process `\VGA_controller.$proc$VGA_controller.v:148$58'.
  created $dff cell `$procdff$232' with positive edge clock.
Creating register for signal `\VGA_controller.$formal$VGA_controller.v:155$8_EN' using process `\VGA_controller.$proc$VGA_controller.v:148$58'.
  created $dff cell `$procdff$233' with positive edge clock.
Creating register for signal `\VGA_controller.$formal$VGA_controller.v:156$9_CHECK' using process `\VGA_controller.$proc$VGA_controller.v:148$58'.
  created $dff cell `$procdff$234' with positive edge clock.
Creating register for signal `\VGA_controller.$formal$VGA_controller.v:156$9_EN' using process `\VGA_controller.$proc$VGA_controller.v:148$58'.
  created $dff cell `$procdff$235' with positive edge clock.
Creating register for signal `\VGA_controller.$formal$VGA_controller.v:157$10_CHECK' using process `\VGA_controller.$proc$VGA_controller.v:148$58'.
  created $dff cell `$procdff$236' with positive edge clock.
Creating register for signal `\VGA_controller.$formal$VGA_controller.v:157$10_EN' using process `\VGA_controller.$proc$VGA_controller.v:148$58'.
  created $dff cell `$procdff$237' with positive edge clock.
Creating register for signal `\VGA_controller.$formal$VGA_controller.v:158$11_CHECK' using process `\VGA_controller.$proc$VGA_controller.v:148$58'.
  created $dff cell `$procdff$238' with positive edge clock.
Creating register for signal `\VGA_controller.$formal$VGA_controller.v:158$11_EN' using process `\VGA_controller.$proc$VGA_controller.v:148$58'.
  created $dff cell `$procdff$239' with positive edge clock.
Creating register for signal `\VGA_controller.$formal$VGA_controller.v:159$12_CHECK' using process `\VGA_controller.$proc$VGA_controller.v:148$58'.
  created $dff cell `$procdff$240' with positive edge clock.
Creating register for signal `\VGA_controller.$formal$VGA_controller.v:159$12_EN' using process `\VGA_controller.$proc$VGA_controller.v:148$58'.
  created $dff cell `$procdff$241' with positive edge clock.
Creating register for signal `\VGA_controller.$formal$VGA_controller.v:164$13_CHECK' using process `\VGA_controller.$proc$VGA_controller.v:148$58'.
  created $dff cell `$procdff$242' with positive edge clock.
Creating register for signal `\VGA_controller.$formal$VGA_controller.v:164$13_EN' using process `\VGA_controller.$proc$VGA_controller.v:148$58'.
  created $dff cell `$procdff$243' with positive edge clock.
Creating register for signal `\VGA_controller.$formal$VGA_controller.v:166$14_CHECK' using process `\VGA_controller.$proc$VGA_controller.v:148$58'.
  created $dff cell `$procdff$244' with positive edge clock.
Creating register for signal `\VGA_controller.$formal$VGA_controller.v:166$14_EN' using process `\VGA_controller.$proc$VGA_controller.v:148$58'.
  created $dff cell `$procdff$245' with positive edge clock.
Creating register for signal `\VGA_controller.$formal$VGA_controller.v:168$15_CHECK' using process `\VGA_controller.$proc$VGA_controller.v:148$58'.
  created $dff cell `$procdff$246' with positive edge clock.
Creating register for signal `\VGA_controller.$formal$VGA_controller.v:168$15_EN' using process `\VGA_controller.$proc$VGA_controller.v:148$58'.
  created $dff cell `$procdff$247' with positive edge clock.
Creating register for signal `\VGA_controller.$formal$VGA_controller.v:173$16_CHECK' using process `\VGA_controller.$proc$VGA_controller.v:148$58'.
  created $dff cell `$procdff$248' with positive edge clock.
Creating register for signal `\VGA_controller.$formal$VGA_controller.v:173$16_EN' using process `\VGA_controller.$proc$VGA_controller.v:148$58'.
  created $dff cell `$procdff$249' with positive edge clock.
Creating register for signal `\VGA_controller.\r_VDE' using process `\VGA_controller.$proc$VGA_controller.v:137$54'.
  created $dff cell `$procdff$250' with positive edge clock.
Creating register for signal `\VGA_controller.\r_VSYNC' using process `\VGA_controller.$proc$VGA_controller.v:129$45'.
  created $dff cell `$procdff$251' with positive edge clock.
Creating register for signal `\VGA_controller.\r_HSYNC' using process `\VGA_controller.$proc$VGA_controller.v:121$36'.
  created $dff cell `$procdff$252' with positive edge clock.
Creating register for signal `\VGA_controller.\r_VCNT' using process `\VGA_controller.$proc$VGA_controller.v:106$28'.
  created $dff cell `$procdff$253' with positive edge clock.
Creating register for signal `\VGA_controller.\r_HCNT' using process `\VGA_controller.$proc$VGA_controller.v:95$22'.
  created $dff cell `$procdff$254' with positive edge clock.
Creating register for signal `\VGA_controller.\r_Y_COORD' using process `\VGA_controller.$proc$VGA_controller.v:87$19'.
  created $dff cell `$procdff$255' with positive edge clock.
Creating register for signal `\VGA_controller.\r_X_COORD' using process `\VGA_controller.$proc$VGA_controller.v:77$17'.
  created $dff cell `$procdff$256' with positive edge clock.

2.2.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `VGA_controller.$proc$VGA_controller.v:168$167'.
Removing empty process `VGA_controller.$proc$VGA_controller.v:166$165'.
Removing empty process `VGA_controller.$proc$VGA_controller.v:164$163'.
Removing empty process `VGA_controller.$proc$VGA_controller.v:159$161'.
Removing empty process `VGA_controller.$proc$VGA_controller.v:158$159'.
Removing empty process `VGA_controller.$proc$VGA_controller.v:157$157'.
Removing empty process `VGA_controller.$proc$VGA_controller.v:156$155'.
Removing empty process `VGA_controller.$proc$VGA_controller.v:155$153'.
Removing empty process `VGA_controller.$proc$VGA_controller.v:154$151'.
Removing empty process `VGA_controller.$proc$VGA_controller.v:153$149'.
Removing empty process `VGA_controller.$proc$VGA_controller.v:152$147'.
Removing empty process `VGA_controller.$proc$VGA_controller.v:151$145'.
Removing empty process `VGA_controller.$proc$VGA_controller.v:150$143'.
Removing empty process `VGA_controller.$proc$VGA_controller.v:173$169'.
Removing empty process `VGA_controller.$proc$VGA_controller.v:145$141'.
Removing empty process `VGA_controller.$proc$VGA_controller.v:63$140'.
Removing empty process `VGA_controller.$proc$VGA_controller.v:62$139'.
Removing empty process `VGA_controller.$proc$VGA_controller.v:61$138'.
Removing empty process `VGA_controller.$proc$VGA_controller.v:60$137'.
Removing empty process `VGA_controller.$proc$VGA_controller.v:59$136'.
Removing empty process `VGA_controller.$proc$VGA_controller.v:58$135'.
Removing empty process `VGA_controller.$proc$VGA_controller.v:57$134'.
Found and cleaned up 4 empty switches in `\VGA_controller.$proc$VGA_controller.v:148$58'.
Removing empty process `VGA_controller.$proc$VGA_controller.v:148$58'.
Found and cleaned up 1 empty switch in `\VGA_controller.$proc$VGA_controller.v:137$54'.
Removing empty process `VGA_controller.$proc$VGA_controller.v:137$54'.
Found and cleaned up 1 empty switch in `\VGA_controller.$proc$VGA_controller.v:129$45'.
Removing empty process `VGA_controller.$proc$VGA_controller.v:129$45'.
Found and cleaned up 1 empty switch in `\VGA_controller.$proc$VGA_controller.v:121$36'.
Removing empty process `VGA_controller.$proc$VGA_controller.v:121$36'.
Found and cleaned up 2 empty switches in `\VGA_controller.$proc$VGA_controller.v:106$28'.
Removing empty process `VGA_controller.$proc$VGA_controller.v:106$28'.
Found and cleaned up 1 empty switch in `\VGA_controller.$proc$VGA_controller.v:95$22'.
Removing empty process `VGA_controller.$proc$VGA_controller.v:95$22'.
Found and cleaned up 1 empty switch in `\VGA_controller.$proc$VGA_controller.v:87$19'.
Removing empty process `VGA_controller.$proc$VGA_controller.v:87$19'.
Found and cleaned up 1 empty switch in `\VGA_controller.$proc$VGA_controller.v:77$17'.
Removing empty process `VGA_controller.$proc$VGA_controller.v:77$17'.
Cleaned up 12 empty switches.

2.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module VGA_controller.
<suppressed ~1 debug messages>

2.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \VGA_controller..
Removed 1 unused cells and 81 unused wires.
<suppressed ~2 debug messages>

2.5. Executing CHECK pass (checking for obvious problems).
checking module VGA_controller..
found and reported 0 problems.

2.6. Executing OPT pass (performing simple optimizations).

2.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module VGA_controller.

2.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\VGA_controller'.
<suppressed ~87 debug messages>
Removed a total of 29 cells.

2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \VGA_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~13 debug messages>

2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \VGA_controller.
Performed a total of 0 changes.

2.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\VGA_controller'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.6.6. Executing OPT_RMDFF pass (remove dff with constant values).
Promoting init spec \r_past_valid = 1'0 to constant driver in module VGA_controller.
Promoted 1 init specs to constant drivers.

2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \VGA_controller..
Removed 0 unused cells and 30 unused wires.
<suppressed ~12 debug messages>

2.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module VGA_controller.

2.6.9. Rerunning OPT passes. (Maybe there is more to do..)

2.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \VGA_controller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~13 debug messages>

2.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \VGA_controller.
Performed a total of 0 changes.

2.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\VGA_controller'.
Removed a total of 0 cells.

2.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \VGA_controller..

2.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module VGA_controller.

2.6.16. Finished OPT passes. (There is nothing left to do.)

2.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell VGA_controller.$sub$VGA_controller.v:108$30 ($sub).
Removed top 15 bits (of 32) from port Y of cell VGA_controller.$sub$VGA_controller.v:108$30 ($sub).
Removed top 31 bits (of 32) from port B of cell VGA_controller.$sub$VGA_controller.v:111$33 ($sub).
Removed top 15 bits (of 32) from port Y of cell VGA_controller.$sub$VGA_controller.v:111$33 ($sub).
Removed top 6 bits (of 16) from port B of cell VGA_controller.$eq$VGA_controller.v:152$90 ($eq).
Removed top 6 bits (of 16) from port B of cell VGA_controller.$eq$VGA_controller.v:153$91 ($eq).
Removed top 6 bits (of 16) from port B of cell VGA_controller.$eq$VGA_controller.v:154$92 ($eq).
Removed top 7 bits (of 16) from port B of cell VGA_controller.$eq$VGA_controller.v:155$93 ($eq).
Removed top 11 bits (of 16) from port B of cell VGA_controller.$eq$VGA_controller.v:156$94 ($eq).
Removed top 9 bits (of 16) from port B of cell VGA_controller.$eq$VGA_controller.v:157$95 ($eq).
Removed top 12 bits (of 16) from port B of cell VGA_controller.$eq$VGA_controller.v:158$96 ($eq).
Removed top 14 bits (of 16) from port B of cell VGA_controller.$eq$VGA_controller.v:159$97 ($eq).
Removed top 31 bits (of 32) from port B of cell VGA_controller.$and$VGA_controller.v:161$98 ($and).
Removed top 31 bits (of 32) from port Y of cell VGA_controller.$and$VGA_controller.v:161$98 ($and).
Removed top 31 bits (of 32) from port B of cell VGA_controller.$and$VGA_controller.v:161$100 ($and).
Removed top 31 bits (of 32) from port Y of cell VGA_controller.$and$VGA_controller.v:161$100 ($and).
Removed top 12 bits (of 16) from port B of cell VGA_controller.$eq$VGA_controller.v:173$120 ($eq).
Removed top 31 bits (of 32) from wire VGA_controller.$and$VGA_controller.v:161$100_Y.
Removed top 31 bits (of 32) from wire VGA_controller.$and$VGA_controller.v:161$98_Y.

2.8. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

2.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \VGA_controller..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

2.10. Executing MEMORY_COLLECT pass (generating $mem cells).

2.11. Executing OPT pass (performing simple optimizations).

2.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module VGA_controller.
<suppressed ~2 debug messages>

2.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\VGA_controller'.
Removed a total of 0 cells.

2.11.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \VGA_controller..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

2.11.5. Finished fast OPT passes.

2.12. Printing statistics.

=== VGA_controller ===

   Number of wires:                107
   Number of wire bits:            559
   Number of public wires:          24
   Number of public wire bits:     234
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                104
     $add                            6
     $assert                         3
     $assume                        10
     $cover                          1
     $dff                           26
     $eq                            11
     $ge                             3
     $gt                             2
     $le                             4
     $logic_and                      6
     $logic_not                      4
     $logic_or                       4
     $lt                             1
     $mux                           19
     $ne                             1
     $sub                            3

2.13. Executing CHECK pass (checking for obvious problems).
checking module VGA_controller..
found and reported 0 problems.

3. Executing MEMORY_NORDFF pass (extracting $dff cells from $mem).

4. Executing ASYNC2SYNC pass.

5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \VGA_controller..
Removed 13 unused cells and 12 unused wires.
<suppressed ~14 debug messages>

6. Executing SETUNDEF pass (replace undef values with defined constants).

7. Executing OPT pass (performing simple optimizations).

7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module VGA_controller.

7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\VGA_controller'.
Removed a total of 0 cells.

7.3. Executing OPT_RMDFF pass (remove dff with constant values).
Promoting init spec $formal$VGA_controller.v:150$3_EN = 1'0 to constant driver in module VGA_controller.
Promoted 1 init specs to constant drivers.

7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \VGA_controller..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

7.5. Rerunning OPT passes. (Removed registers in this run.)

7.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module VGA_controller.

7.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\VGA_controller'.
Removed a total of 0 cells.

7.8. Executing OPT_RMDFF pass (remove dff with constant values).

7.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \VGA_controller..

7.10. Finished fast OPT passes.

8. Executing CHECK pass (checking for obvious problems).
checking module VGA_controller..
found and reported 0 problems.

9. Executing HIERARCHY pass (managing design hierarchy).

9.1. Analyzing design hierarchy..
Top module:  \VGA_controller

9.2. Analyzing design hierarchy..
Top module:  \VGA_controller
Removed 0 unused modules.
Module VGA_controller directly or indirectly contains formal properties -> setting "keep" attribute.

10. Executing ILANG backend.
Output filename: ../model/design.il

End of script. Logfile hash: 1d7f2cd06d
CPU: user 0.10s system 0.00s, MEM: 45.84 MB total, 11.11 MB resident
Yosys 0.9+932 (git sha1 65f197e2, clang 6.0.0-1ubuntu2 -fPIC -Os)
Time spent: 29% 8x opt_clean (0 sec), 18% 3x check (0 sec), ...
